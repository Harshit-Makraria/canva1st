// This is your Prisma schema file for MongoDB
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String
  projects       Project[]
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  subscriptions  Subscription[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@index([provider, providerAccountId], name: "provider_providerAccountId_idx") // Composite index instead of composite ID
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@index([identifier, token], name: "identifier_token_idx") // Create a composite index for identifier and token
}

model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
}

model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  json         String
  height       Int
  width        Int
  thumbnailUrl String?
  isTemplate   Boolean?
  isPro        Boolean?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Subscription {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @db.ObjectId
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId   String
  customerId       String
  priceId          String
  status           String
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}
