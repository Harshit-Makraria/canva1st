// // This is your Prisma schema file for MongoDB
// // Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CREATE_USER
  CREATE_PRODUCT
  HANDEL_PORTAL
  EMPLOYEE
}

enum VerificationStatus {
  PENDING
  ACCEPTED
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  role Role[]

  user PostToAccount[]
}

model PostToAccount {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  postId    String @db.ObjectId
  accountId String @db.ObjectId

  Post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  Account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String          @unique
  emailVerified   DateTime?
  image           String?
  password        String
  designs         Design[]
  accounts        Account[]       @relation("userAccounts") // Relationship for all accounts
  sessions        Session[]
  authenticators  Authenticator[]
  subscriptions   Subscription[]
  orders          Order[]
  role            Role?
  cart            Cart[]
  activeAccountId String?         @db.ObjectId
  activeAccount   Account?        @relation("activeAccountRelation", fields: [activeAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Set to NoAction to prevent cyclic issue
}

model Account {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation("userAccounts", fields: [userId], references: [id], onDelete: Cascade)

  // Field for the activeAccountRelation
  // this is just a fix to a  bug , it is a 1-1 mapping and not 1-m mapping bw user and account
  usersWithActiveAccount User[] @relation("activeAccountRelation")

  post           PostToAccount[]
  additionalRole Role[]

  branchId String? @db.ObjectId
  branch   Branch? @relation(fields: [branchId], references: [id], onDelete: Cascade)

  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  @@index([userId])
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email     String   @unique
  post      String[]
  branchIds String[]

  status VerificationStatus @default(PENDING)

  token   String?
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([branchIds, token], name: "identifier_token_idx")
}

model Branch {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  user      Account[]
  city      String
  pincode   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model Design {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  userId       String      @db.ObjectId
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  json         CanvaJson[]
  product      Product?
  height       Int
  width        Int
  cart         Cart[]
  thumbnailUrl String?
  isTemplate   Boolean?
  isPro        Boolean?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model CanvaJson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @default("Untitled")
  designId  String   @db.ObjectId
  json      String
  design    Design   @relation(fields: [designId], references: [id], onDelete: Cascade)
  height    Int
  width     Int
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
}

model Subscription {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @db.ObjectId
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId   String
  customerId       String
  priceId          String
  status           String
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Product {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float[]
  size         String[]
  cod          String?
  height       Float?
  width        Float?
  quantity     Float
  eyelets      String?
  Shape        String?
  Material     String?
  designId     String?    @unique @db.ObjectId
  design       Design?    @relation(fields: [designId], references: [id], onDelete: Cascade)
  quantitys    Quantity[]
  categoryId   String?    @db.ObjectId
  category     Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  imageUrl     String?
  userId       String     @db.ObjectId
  customizable Boolean    @default(false)
  options      Option[]
  stock        Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  imageUrl  String
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Option {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  values    String[]
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  totalAmount Float
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String @db.ObjectId
  quantity  Int
  price     Float
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  designId  String   @db.ObjectId
  design    Design   @relation(fields: [designId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantity  String?
  productId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quantity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Float
  price     Float
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
